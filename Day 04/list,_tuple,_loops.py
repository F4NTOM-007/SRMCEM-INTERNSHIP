# -*- coding: utf-8 -*-
"""List, Tuple, Loops.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XnuHxINB8v77eIWYdbo9ocgugVIDaOoz

## ***Indexing and Slicing***
"""

# INDEXING AND SLICING

str = "Hello"

print('indexing : ', str[3])

print('Slicing : ', str[0 : 4])

str2 = "STUNT"

print("Negative indexing and slicing : ", str2[-3 : ])

"""## ***Operations***"""

str1 = 'Hello'
str2 = 'World'

#Concatenation

t = str1 + str2
print(t)

#Repition

t = str1 * 2
print(t)

str1 = 'Hello'
str2 = 'World'

#Membership (in) or (notin)

'e' in str1

str1 = 'Hello'
str2 = 'World'

#Length (len)

len(str1)

str1 = 'Hello'
str2 = 'World'

#Upper() Lower()

str1.upper()

#Count
str = 'We love Python'

print(str.count(' ') + 1)

"""## ***Programs***"""

#Program 1 WAP to perint each character of a srtring on a new line with loop

str = 'Hello'

print(*str, sep='\n')

#Program 2 WAP to print the index and character for each position

str = 'Hello'

print(*str, sep='\n')

#Program 3 WAP to count how many times letter 'a' appears in a given string

str = 'Hello Yash'

print(str.count('a'))

#program 4 WAP to reverse a string using a loop without using slicing [: : -1]
str = 'Python'
print("".join(reversed(str)))

#Program 5 WAP to count the number of vowels aeiou in a string
str = 'Hello'
vowels = 'aeiou'

vowels in str

#Program 6 WAP to print each word of a given sentence on a separate line
str = 'Hello World'
print(*str.split(), sep='\n')

#Program 7 WAP to replace every space with -
s = "Hello World from Python"
print(s.replace(" ", "-"))

#Program 8 WAP to check palindrome number

#Program 9 WAP to print only the characters at even indexes
str = 'Hello'

"""## ***Conditional Statements***"""

#Remove Vowels from "Python For AI"
str = "Python For AI"
vowels = "aeiouAEIOU"
result = "".join([char for char in str if char not in vowels])
print(result)

#another way for upper program
str = "Pythoan For AI"
vowels = 'aeiouAEIOU'
result = ""
for char in str:
  if char not in vowels:
    result += char
print(result)

#Remove Vowels from "Python For AI" using equality checks with an else block
str = "Python For AI"
result = ""
for char in str:
  if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' or \
     char == 'A' or char == 'E' or char == 'I' or char == 'O' or char == 'U':
    # This character is a vowel, so we do nothing (pass)
    pass
  else:
    # This character is not a vowel, so we add it to the result
    result += char
print(result)

# WAP to print prime no. from 1 to 50
for i in range(1, 51):
  for j in range(2, i):
      if i % j == 0:
        break
  else:
      print(i)

"""## **LOOP**"""

for i in range(10):
  print(i*i)

list = [1, 2, 35, 4, 53]
for i in list:
  print(i)

l1 = [1, 2, 3, 4, 5]
l2 = []
for i in l1:
  l2.append(i*i)

for i in l2:
  print(l2.index(i)+1, ' : ', i)

#List Comprehension for Printing Position and square of the list like
l1 = [1, 2, 3, 4, 5]
l2 = [(i, i*i) for i in range(1, 6)]
print(l2)

"""## ***LIST***"""

# List can contain heterogeneous elements
# they store memory location instead of box number or index

#List Slicing
vov = ['A', 'E', 'I', 'O', 'U']
print(vov[1 : 4])

#List Append
ilist = [189, 456.7, 456, 98, 90]
ilist.append(45)
print(ilist)

#list Extend
ilist2 = [56,78,90.8,567]
ilist3 = [89, 456.7, 456, 98, 90]
ilist2.extend(ilist3)
print(ilist2)

#list Insert
ilist1 = [67, 90, 78, 456]
ilist1.insert(3, 99)
print(ilist1)

#List Remove
ilist2 = [56, 89, 90, 456]
ilist2.remove(89)
print(ilist2)

#List Pop
ilist2 = [56, 89, 90, 456]
ilist2.pop()

#List Clear
ilist2 = [56, 89, 90, 456]
ilist2.clear()
print(ilist2)

#List Remove
ilist2 = [56, 89, 90, 456]
ilist2.remove(89)
print(ilist2)

#List index
ilist2 = [56, 89, 90, 456]
ilist2.index(89)

#List Count
ilist2 = [56, 89, 90, 89, 456]
ilist2.count(89)

#List Sort
ilist2 = [56, 89, 90, 456]
ilist2.sort()
print(ilist2)

#Nested Lists
nes_lis = [
    [
        [1,2,3,4], [5,6,7,8]
    ]
    [
        [10,11,12], [13,14,15]
    ]
]

#WAP to combine even no. of both lists in a new variable and print that
l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
l3 = []

l3 = l1[1::2] + l2[::2]

print(l3)

#Program to Find Largest no. in unsorted List
l1 = [4, 1, 15, 6, 1 ,4, 5, 15]
l1.sort()
print(l1[-1])

"""## ***Tuples***"""

# Tuple is a sequence data type
# Immutable, containing heterogeneous sequence of elements
# Simulataneous assignment is possible

# Immutable, containing heterogeneous sequence of elements
(age, name, lar) = (23, "Yash", [9, 8, 7])
print(age)
print(name, lar)

# We can assign a typle of value to a name
year = (23, 87, 90)
parameter = (7.9, .89)
print(year, parameter)

# Note : when creating tuple for 1 value only , it changes to 'int' so add a ',' after that value for tuple
l1 = [2]
print(type(l1))
l2 = (4,)
print(type(l2))

#Tuples maybe Nested
y = (56, 8, 9)
u = y, (2,6,7)
u

#Tuple consists of a number of values separated by commas
r = 890, "jhan", 90.8
r[1]

#Extract positions in typles using slices.
y = (56, 8, 9)
k = (56, 8, 9)

xcoo = k[1:]
xcoo